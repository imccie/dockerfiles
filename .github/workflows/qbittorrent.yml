name: 构建qBittorrent镜像
on:
  workflow_dispatch:
  repository_dispatch:
    types: qbittorrent

jobs:
  build:
    runs-on: ubuntu-latest
    name: 并行构建多平台镜像
    strategy:
      matrix:
        architecture: [linux/386, linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6, linux/ppc64le, linux/s390x]
      max-parallel: 7
    outputs:
      full_version: ${{ steps.prepare.outputs.full_version }}
      multitags: ${{ steps.prepare.outputs.multitags }}
      image_name: ${{ env.IMAGE_NAME }}
    env:
      IMAGE_NAME: qbittorrent
      DOCKERFILE_NAME: Dockerfile.GithubAction
    steps:
      - 
        name: Checkout
        uses: actions/checkout@master

      -
        name: Prepare
        id: prepare
        run: |
          FULL_VERSION=$(curl -s https://api.github.com/repos/qbittorrent/qBittorrent/tags | jq -r .[]."name" | grep -m1 -E "release-([0-9]\.?){3,4}$" | sed "s/release-//")
          
          if [[ ${FULL_VERSION} == 4.3* ]]; then \
            perl -i -pe "s|LIBTORRENT_MAJOR_VERSION|1|" ${IMAGE_NAME}/${DOCKERFILE_NAME}; \
          else \
            perl -i -pe "s|LIBTORRENT_MAJOR_VERSION|2|" ${IMAGE_NAME}/${DOCKERFILE_NAME}; \
          fi

          DOCKERHUB_REPOSITORY="${{ secrets.DOCKER_USERNAME }}/${IMAGE_NAME}"

          PATCH_VERSION=$(printf "${FULL_VERSION}" | cut -d '.' -f 1-3)
          MINOR_VERSION=$(printf "${FULL_VERSION}" | cut -d '.' -f 1-2)
          MAJOR_VERSION=$(printf "${FULL_VERSION}" | cut -d '.' -f 1)

          if [[ ${FULL_VERSION} == ${PATCH_VERSION} ]]; then \
            MULTITAGS="${MAJOR_VERSION} ${MINOR_VERSION} ${FULL_VERSION} latest"; \
          else \
            MULTITAGS="${MAJOR_VERSION} ${MINOR_VERSION} ${PATCH_VERSION} ${FULL_VERSION} latest"; \
          fi

          ARCH=${{ matrix.architecture }}
          TAGS="${DOCKERHUB_REPOSITORY}:${FULL_VERSION}-$(echo ${ARCH} | perl -pe '{s|linux/||g; s|/|-|g}')"

          echo ::set-output name=full_version::${FULL_VERSION}
          echo ::set-output name=multitags::${MULTITAGS}
          echo ::set-output name=build_args::QBITTORRENT_VERSION=${FULL_VERSION}
          echo ::set-output name=tags::${TAGS}

      - 
        name: Set Up QEMU
        uses: docker/setup-qemu-action@v1

      - 
        name: Set Up Buildx
        uses: docker/setup-buildx-action@v1

      - 
        name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - 
        name: Set Up Cache
        uses: actions/cache@v2
        id: buildx-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx

      - 
        name: Buildx
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.IMAGE_NAME }}
          file: ${{ env.IMAGE_NAME }}/${{ env.DOCKERFILE_NAME }}
          platforms: ${{ matrix.architecture }}
          push: true
          build-args: ${{ steps.prepare.outputs.build_args }}
          tags: ${{ steps.prepare.outputs.tags }}

  manifest:
    runs-on: ubuntu-latest
    name: 维护多平台标签
    needs: build
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - 
        name: Checkout
        uses: actions/checkout@master
      
      - 
        name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - 
        name: Create And Push Manifest
        run: |
          DOCKERHUB_REPOSITORY="${{ secrets.DOCKER_USERNAME }}/${{ needs.build.outputs.image_name }}"
          ALL_ARCH=(386 amd64 arm64 arm-v7 arm-v6 ppc64le s390x)
          MULTITAGS="${{ needs.build.outputs.multitags }}"
          
          IMAGES=()
          for arch in ${ALL_ARCH[@]}; do \
            IMAGES+=( "${DOCKERHUB_REPOSITORY}:${{ needs.build.outputs.full_version }}-${arch}" ); \
          done

          for tag in ${MULTITAGS}; do \
            docker manifest create "${DOCKERHUB_REPOSITORY}:${tag}" "${IMAGES[@]}"; \
          done

          for tag in ${MULTITAGS}; do \
            docker manifest push --purge "${DOCKERHUB_REPOSITORY}:${tag}"; \
          done

          ## 发送消息
          curl -Ss -X POST -d "text=qBittorrent镜像构建完成&desp=GithubAction已经自动构建完成qBittorrent" "https://iyuu.cn/${{ secrets.IYUU_TOKEN}}.send"

      - name: Update DockerHub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/${{ needs.build.outputs.image_name }}
          short-description: qBittorrent ${{ needs.build.outputs.full_version }}: 全平台, 下载完成通知, 自动分类, tracker错误标记, 宕机通知, 日志显示

