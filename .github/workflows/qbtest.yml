name: 构建qBtest镜像

on:
  workflow_dispatch:

env:
  ## 镜像名，也是git仓库中的文件夹名
  IMAGE_NAME: qbtest
  ## Dockerfile文件名称，在这里修改
  DOCKERFILE_NAME: Dockerfile.GithubAction

jobs:
  base:
    runs-on: ubuntu-latest
    name: 基本信息
    outputs:
      full_version: ${{ steps.base.outputs.full_version }}
      multitags: ${{ steps.base.outputs.multitags }}
      build_args: ${{ steps.base.outputs.build_args }}
      matrix: ${{ steps.base.outputs.matrix }}
    steps:
      - 
        name: Set Matrix And Base Infomation
        id: base
        run: |
          FULL_VERSION=$(curl -s https://api.github.com/repos/qbittorrent/qBittorrent/tags | jq -r .[]."name" | grep -m1 -E "release-([0-9]{1,2}\.?){3,4}$" | sed "s/release-//")
          PATCH_VERSION=$(printf "${FULL_VERSION}" | cut -d '.' -f 1-3)
          MINOR_VERSION=$(printf "${FULL_VERSION}" | cut -d '.' -f 1-2)
          MAJOR_VERSION=$(printf "${FULL_VERSION}" | cut -d '.' -f 1)

          if [[ ${FULL_VERSION} == ${PATCH_VERSION} ]]; then \
            MULTITAGS="${MAJOR_VERSION} ${MINOR_VERSION} ${FULL_VERSION} latest"; \
          else \
            MULTITAGS="${MAJOR_VERSION} ${MINOR_VERSION} ${PATCH_VERSION} ${FULL_VERSION} latest"; \
          fi

          ## 要构建哪些平台的镜像，在这里修改
          MATRIX='{"architecture": ["linux/386", "linux/amd64"]}'

          echo ::set-output name=full_version::${FULL_VERSION}
          echo ::set-output name=multitags::${MULTITAGS}
          echo ::set-output name=build_args::QBITTORRENT_VERSION=${FULL_VERSION}
          echo ::set-output name=matrix::${MATRIX}

  build:
    needs: base
    runs-on: ubuntu-latest
    name: 并行构建
    timeout-minutes: 150
    strategy:
      matrix: ${{ fromJSON(needs.base.outputs.matrix) }}
    steps:
      - 
        name: Checkout
        uses: actions/checkout@master

      -
        name: Prepare
        id: prepare
        run: |
          FULL_VERSION="${{ needs.base.outputs.full_version }}"
          DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          ARCH="${{ matrix.architecture }}"
          
          ## 修改LIBTORRENT的基础版本
          if [[ ${FULL_VERSION} == 4.3* ]]; then \
            perl -i -pe "s|LIBTORRENT_MAJOR_VERSION|1|" ${IMAGE_NAME}/${DOCKERFILE_NAME}; \
          else \
            perl -i -pe "s|LIBTORRENT_MAJOR_VERSION|2|" ${IMAGE_NAME}/${DOCKERFILE_NAME}; \
          fi

          TAGS="${DOCKER_USERNAME}/${IMAGE_NAME}:${FULL_VERSION}-$(echo ${ARCH} | perl -pe '{s|linux/||g; s|/|-|g}')"

          echo ::set-output name=tags::${TAGS}

      - 
        name: Set Up QEMU
        uses: docker/setup-qemu-action@v1

      - 
        name: Set Up Buildx
        uses: docker/setup-buildx-action@v1

      - 
        name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - 
        name: Buildx
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.IMAGE_NAME }}
          file: ${{ env.IMAGE_NAME }}/${{ env.DOCKERFILE_NAME }}
          platforms: ${{ matrix.architecture }}
          push: true
          build-args: ${{ needs.base.outputs.build_args }}
          tags: ${{ steps.prepare.outputs.tags }}

  maintain:
    needs: [base, build]
    runs-on: ubuntu-latest
    name: 信息维护
    steps:
      - 
        name: Checkout
        uses: actions/checkout@master
      
      - 
        name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - 
        name: Create And Push Manifest
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          DOCKERHUB_REPOSITORY="${{ secrets.DOCKER_USERNAME }}/${IMAGE_NAME}"
          FULL_VERSION="${{ needs.base.outputs.full_version }}"
          MATRIX='${{ needs.base.outputs.matrix }}'
          ALL_ARCH=( $(echo ${MATRIX} | jq -r .architecture[] | perl -pe '{s|linux/||g; s|/|-|g}') )
          MULTITAGS="${{ needs.base.outputs.multitags }}"

          echo ALL_ARCH[@]=${ALL_ARCH[@]}
          
          IMAGES=()
          for arch in ${ALL_ARCH[@]}; do \
            IMAGES+=( "${DOCKERHUB_REPOSITORY}:${FULL_VERSION}-${arch}" ); \
          done

          echo IMAGES[@]=${IMAGES[@]}

          for tag in ${MULTITAGS}; do \
            docker manifest create "${DOCKERHUB_REPOSITORY}:${tag}" "${IMAGES[@]}"; \
          done

          echo MULTITAGS=${MULTITAGS}

          for tag in ${MULTITAGS}; do \
            docker manifest push --purge "${DOCKERHUB_REPOSITORY}:${tag}"; \
          done

      - 
        name: Update DockerHub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./${{ env.IMAGE_NAME }}/readme.md
          short-description: ${{ env.IMAGE_NAME }} ${{ needs.base.outputs.full_version }}：全平台, 下载完成通知, 自动分类, tracker错误标记, 宕机通知, 日志显示

  notify:
    needs: [base, build, maintain]
    if: always()
    runs-on: ubuntu-latest
    name: 发送通知
    steps:    
      - 
        name: Send All Success Notify
        if: ${{ needs.build.result == 'success' && needs.maintain.result == 'success' }}
        uses: zcong1993/actions-ding@master
        with:
          dingToken: ${{ secrets.DD_BOT_TOKEN }}
          secret: ${{ secrets.DD_BOT_SECRET }}
          ignoreError: true
          body: |
            {
              "msgtype": "text",
              "text": {
                "content": "镜像构建并维护成功\n\n${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}镜像构建成功，信息维护成功\n版本：${{ needs.base.outputs.full_version }}\n链接：https://hub.docker.com/repository/docker/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
              }
            }

      - 
        name: Send Only Build Success Notify
        if: ${{ needs.build.result == 'success' && needs.maintain.result != 'success' }}
        uses: zcong1993/actions-ding@master
        with:
          dingToken: ${{ secrets.DD_BOT_TOKEN }}
          secret: ${{ secrets.DD_BOT_SECRET }}
          ignoreError: true
          body: |
            {
              "msgtype": "text",
              "text": {
                "content": "镜像构建成功\n\n${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}镜像构建成功，但信息维护失败了\n版本：${{ needs.base.outputs.full_version }}\n链接：https://hub.docker.com/repository/docker/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
              }
            }
      
      - 
        name: Send Failure Notify
        if: ${{ needs.build.result == 'failure' }}
        uses: zcong1993/actions-ding@master
        with:
          dingToken: ${{ secrets.DD_BOT_TOKEN }}
          secret: ${{ secrets.DD_BOT_SECRET }}
          ignoreError: true
          body: |
            {
              "msgtype": "text",
              "text": {
                "content": "镜像构建失败\n\n${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}镜像构建失败\n版本：${{ needs.base.outputs.full_version }}\n链接：https://hub.docker.com/repository/docker/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
              }
            }
