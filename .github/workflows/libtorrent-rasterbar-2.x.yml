name: 构建libtorrent-rasterbar-2.x镜像
on:
  workflow_dispatch:
  repository_dispatch:
    types: libtorrent-rasterbar-2.x

jobs:
  build:
    runs-on: ubuntu-latest
    name: 并行构建多平台镜像
    strategy:
      matrix:
        architecture: [linux/386, linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6, linux/ppc64le, linux/s390x]
      max-parallel: 7
    outputs:
      full_version: ${{ steps.prepare.outputs.full_version }}
      major_version: ${{ steps.prepare.outputs.major_version }}
      image_name: ${{ env.IMAGE_NAME }}
    env:
      IMAGE_NAME: libtorrent-rasterbar
      MAJOR_VERSION: 2
    steps:
      - 
        name: Checkout
        uses: actions/checkout@master
      
      -
        name: Prepare
        id: prepare
        run: |
          DOCKERHUB_REPOSITORY="${{ secrets.DOCKER_USERNAME }}/${IMAGE_NAME}"
          FULL_VERSION=$(curl -s https://api.github.com/repos/arvidn/libtorrent/tags | jq -r .[]."name" | grep -m1 -E "v${MAJOR_VERSION}\.([0-9]+\.?){2,3}$" | sed "s/v//")
          ARCH=${{ matrix.architecture }}
          TAGS="${DOCKERHUB_REPOSITORY}:${FULL_VERSION}-$(echo ${ARCH} | perl -pe '{s|linux/||g; s|/|-|g}')"
          echo ::set-output name=full_version::${FULL_VERSION}
          echo ::set-output name=major_version::${MAJOR_VERSION}
          echo ::set-output name=build_args::LIBTORRENT_VERSION=${FULL_VERSION}
          echo ::set-output name=tags::${TAGS}

      - 
        name: Set Up QEMU
        uses: docker/setup-qemu-action@v1

      - 
        name: Set Up Buildx
        uses: docker/setup-buildx-action@v1

      - 
        name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - 
        name: Set Up Cache
        uses: actions/cache@v2
        id: buildx-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx

      - 
        name: Buildx
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.IMAGE_NAME }}
          file: ${{ env.IMAGE_NAME }}/Dockerfile.GithubAction
          platforms: ${{ matrix.architecture }}
          push: true
          build-args: ${{ steps.prepare.outputs.build_args }}
          tags: ${{ steps.prepare.outputs.tags }}

  manifest:
    runs-on: ubuntu-latest
    name: 维护多平台标签
    needs: build
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - 
        name: Checkout
        uses: actions/checkout@master
      
      - 
        name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - 
        name: Create And Push Manifest
        run: |
          DOCKERHUB_REPOSITORY="${{ secrets.DOCKER_USERNAME }}/${{ needs.build.outputs.image_name }}"
          IMAGES=()
          ALL_ARCH=(386 amd64 arm64 arm-v7 arm-v6 ppc64le s390x)
          for arch in ${ALL_ARCH[@]}; do \
            IMAGES+=( "${DOCKERHUB_REPOSITORY}:${{ needs.build.outputs.full_version }}-${arch}" ); \
          done
          docker manifest create "${DOCKERHUB_REPOSITORY}:${{ needs.build.outputs.full_version }}" "${IMAGES[@]}"
          docker manifest create "${DOCKERHUB_REPOSITORY}:${{ needs.build.outputs.major_version }}" "${IMAGES[@]}"
          docker manifest push --purge "${DOCKERHUB_REPOSITORY}:${{ needs.build.outputs.full_version }}"
          docker manifest push --purge "${DOCKERHUB_REPOSITORY}:${{ needs.build.outputs.major_version }}"

      - 
        name: Clear
        if: always()
        run: |
          rm -rf ${HOME}/.docker/config.json
